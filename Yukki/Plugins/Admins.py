
import asyncio
import os
import random
from asyncio import QueueEmpty

from config import get_queue
from pyrogram import filters
from pyrogram.types import (CallbackQuery, InlineKeyboardButton,
                            InlineKeyboardMarkup, KeyboardButton, Message,
                            ReplyKeyboardMarkup, ReplyKeyboardRemove)
from pytgcalls import StreamType
from pytgcalls.types.input_stream import InputAudioStream, InputStream

from Yukki import BOT_USERNAME, MUSIC_BOT_NAME, app, db_mem
from Yukki.Core.PyTgCalls import Queues, Yukki
from Yukki.Core.PyTgCalls.Converter import convert
from Yukki.Core.PyTgCalls.Downloader import download
from Yukki.Database import (is_active_chat, is_music_playing, music_off,
                            music_on, remove_active_chat)
from Yukki.Decorators.admins import AdminRightsCheck
from Yukki.Decorators.checker import checker, checkerCB
from Yukki.Inline import audio_markup, primary_markup
from Yukki.Utilities.changers import time_to_seconds
from Yukki.Utilities.chat import specialfont_to_normal
from Yukki.Utilities.theme import check_theme
from Yukki.Utilities.thumbnails import gen_thumb
from Yukki.Utilities.timer import start_timer
from Yukki.Utilities.youtube import get_yt_info_id

loop = asyncio.get_event_loop()


__MODULE__ = "Voice Chat"
__HELP__ = """


/pause
- Pause the playing music on voice chat.

/resume
- Resume the paused music on voice chat.

/skip
- Skip the current playing music on voice chat

/end or /stop
- Stop the playout.

/queue
- Check queue list.


**Note:**
Only for Sudo Users

/activevc
- Check active voice chats on bot.

"""


@app.on_message(
    filters.command(["pause", "skip", "resume", "stop", "end"])
    & filters.group
)
@AdminRightsCheck
@checker
async def admins(_, message: Message):
    global get_queue
    if not len(message.command) == 1:
        return await message.reply_text("Error! Wrong Usage of Command.")
    if not await is_active_chat(message.chat.id):
        return await message.reply_text("Nothing is playing on voice chat.")
    chat_id = message.chat.id
    if message.command[0][1] == "a":
        if not await is_music_playing(message.chat.id):
            return await message.reply_text("Music is already Paused.")
        await music_off(chat_id)
        await Yukki.pytgcalls.pause_stream(chat_id)
        await message.reply_text(
            f"üéß Voicechat Paused by {message.from_user.mention}!"
        )
    if message.command[0][1] == "e":
        if await is_music_playing(message.chat.id):
            return await message.reply_text("Music is already Playing.")
        await music_on(chat_id)
        await Yukki.pytgcalls.resume_stream(message.chat.id)
        await message.reply_text(
            f"üéß Voicechat Resumed by {message.from_user.mention}!"
        )
    if message.command[0][1] == "t" or message.command[0][1] == "n":
        try:
            Queues.clear(message.chat.id)
        except QueueEmpty:
            pass
        await remove_active_chat(chat_id)
        await Yukki.pytgcalls.leave_group_call(message.chat.id)
        await message.reply_text(
            f"üéß Voicechat End/Stopped by {message.from_user.mention}!"
        )
    if message.command[0][1] == "k":
        Queues.task_done(chat_id)
        if Queues.is_empty(chat_id):
            await remove_active_chat(chat_id)
            await message.reply_text(
                "No more music in __Queue__ \n\nLeaving Voice Chat"
            )
            await Yukki.pytgcalls.leave_group_call(message.chat.id)
            return
        else:
            videoid = Queues.get(chat_id)["file"]
            got_queue = get_queue.get(chat_id)
            if got_queue:
                got_queue.pop(0)
            finxx = f"{videoid[0]}{videoid[1]}{videoid[2]}"
            aud = 0
            if str(finxx) != "raw":
                mystic = await message.reply_text(
                    f"**{MUSIC_BOT_NAME} Playlist Function**\n\n__Downloading Next Music From Playlist....__"
                )
                (
                    title,
                    duration_min,
                    duration_sec,
                    thumbnail,
                ) = get_yt_info_id(videoid)
                await mystic.edit(
                    f"**{MUSIC_BOT_NAME} Downloader**\n\n**Title:** {title[:50]}\n\n0% ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì 100%"
                )
                downloaded_file = await loop.run_in_executor(
                    None, download, videoid, mystic, title
                )
                raw_path = await convert(downloaded_file)
                await Yukki.pytgcalls.change_stream(
                    chat_id,
                    InputStream(
                        InputAudioStream(
                            raw_path,
                        ),
                    ),
                )
                theme = await check_theme(chat_id)
                chat_title = await specialfont_to_normal(message.chat.title)
                thumb = await gen_thumb(
                    thumbnail, title, message.from_user.id, theme, chat_title
                )
                buttons = primary_markup(
                    videoid, message.from_user.id, duration_min, duration_min
                )
                await mystic.delete()
                mention = db_mem[videoid]["username"]
                final_output = await message.reply_photo(
                    photo=thumb,
                    reply_markup=InlineKeyboardMarkup(buttons),
                    caption=(
                        f"<b>__Skipped Voice Chat__</b>\n\nüé•<b>__Started Playing:__ </b>[{title[:25]}](https://www.youtube.com/watch?v={videoid}) \n‚è≥<b>__Duration:__</b> {duration_min} Mins\nüë§**__Requested by:__** {mention}"
                    ),
                )
                os.remove(thumb)
            else:
                await Yukki.pytgcalls.change_stream(
                    chat_id,
                    InputStream(
                        InputAudioStream(
                            videoid,
                        ),
                    ),
                )
                afk = videoid
                title = db_mem[videoid]["title"]
                duration_min = db_mem[videoid]["duration"]
                duration_sec = int(time_to_seconds(duration_min))
                mention = db_mem[videoid]["username"]
                videoid = db_mem[videoid]["videoid"]
                if str(videoid) == "smex1":
                    buttons = buttons = audio_markup(
                        videoid,
                        message.from_user.id,
                        duration_min,
                        duration_min,
                    )
                    thumb = "Utils/Telegram.JPEG"
                    aud = 1
                else:
                    _path_ = _path_ = (
                        (str(afk))
                        .replace("_", "", 1)
                        .replace("/", "", 1)
                        .replace(".", "", 1)
                    )
                    thumb = f"cache/{_path_}final.png"
                    buttons = primary_markup(
                        videoid,
                        message.from_user.id,
                        duration_min,
                        duration_min,
                    )
                final_output = await message.reply_photo(
                    photo=thumb,
                    reply_markup=InlineKeyboardMarkup(buttons),
                    caption=f"<b>__Skipped Voice Chat__</b>\n\nüé•<b>__Started Playing:__</b> {title} \n‚è≥<b>__Duration:__</b> {duration_min} \nüë§<b>__Requested by:__ </b> {mention}",
                )
            await start_timer(
                videoid,
                duration_min,
                duration_sec,
                final_output,
                message.chat.id,
                message.from_user.id,
                aud,
            )

idxal asyncio
idxal OS
idxal t…ôsad√ºfi
asyncio olan yolu bo≈ü n√∂vb…ôsind…ô idxal

get_queue konfiqurasiya idxal
pies idxal filtreler
pirogramdan.n√∂vl…ôri idxal (
z…ông sorƒüusu, ƒ±nlinekeyboardbutton d√ºym…ôsi, ƒ±nlinekeyboardmarkup d√ºym…ôsi, klaviatura d√ºym…ôsi, mesaj,
                            Replykeyboardmarkap, replykeyboardperehod)
pytgcalls idxal n√∂v√º
pytgcalls d…ôn stream.types.ƒ±nput_stream giri≈ü audio axƒ±nƒ±nƒ±, giri≈ü axƒ±nƒ±nƒ± idxal edir

Yukki-d…ôn BOT_USERNAME, MUSƒ∞C_BOT_NAME, proqram, db_mem idxal
Yukki-d…ôn.Core.PyTgCalls idxal queue, Yuki
Yukka ' dan.Core.Trial z…ôngl…ôr.√áevirm…ôk Converter idxal
Yukki-d…ôn.Core.Trial z…ôngl…ôr.Y√ºkl…ôyici y√ºkl…ôm…ôni idxal edir
Yukki il…ô.Veril…ônl…ôr bazasƒ± idxal (ƒ±s_actƒ±ve_chat, ƒ±s_music_playing, music_off,
music_on, remove_active_chat)
Yukki-d…ôn.Dekoratorlar.administrators admin doƒürulama idxal
Yukki-d…ôn.Dekoratorlar.Checker bir checker idxal
Yukka ' dan.Daxili audio_markup, primary_markup idxal
Yukki-d…ôn.Kommunal xidm…ôtl…ôr.x…ôyan…ôt√ßil…ôr time_to_seconds ' u idxal edirl…ôr
Yukki-d…ôn.Kommunal xidm…ôtl…ôr.chat x√ºsusi font_to_normal idxal edir
Yukka ' dan.Kommunal xidm…ôtl…ôr.check_theme idxal m√∂vzusu
Yukka ' dan.Kommunal xidm…ôtl…ôr.ki√ßik idxal gen_thumb
Yukki-d…ôn.Kommunal xidm…ôtl…ôr.timer start_timer idxal
Yukki-d…ôn.Kommunal xidm…ôtl…ôr.idxal youtube get_yt_info_id

loop = asyncio.get_event_loop()


__MODULU__ = "S…ôsli chat"
__ Yardƒ±m__="""


/ fasil…ô
- S…ôsli s√∂hb…ôtd…ô musiqi √ßalmasƒ±nƒ± dayandƒ±rƒ±n.

/ x√ºlas…ô
- S…ôsli s√∂hb…ôtd…ô durdurulmu≈ü musiqini davam etdirin.

/ ke√ßm…ôk
- S…ôs chat cari oynatƒ±lamayabilir musiqi skip

/son v…ô ya /stop
- Playback dayandƒ±rmaq.

/ n√∂vb…ô
- Yoxlayƒ±n siyahƒ±sƒ± n√∂vb…ôl…ôrin.


** Qeyd:**
Yalnƒ±z Sudo istifad…ô√ßil…ôr √º√ß√ºn

/aktiv
- Bot √ºzr…ô aktiv s…ôs sohbetler yoxlayƒ±n.

"""


@app.on_message(@proqram.on_message)(
    filters.komanda (["dayandƒ±rmaq", "skip", "davam et", "Stop", "tam"])
    & filtreler.qrup
)
@adminrightscheck
@ yoxlamaq
asynchronous administratorlarƒ± qorunmasƒ± ( _ , mesaj: mesaj):
    qlobal get_queue
    he√ß bir len(mesaj.komanda) == 1:
        g√∂zl…ôy…ôn mesajƒ± qaytarƒ±r.reply_text("Error! Sui-istifad…ô komanda".)
    …ôg…ôr yoxsa, ƒ±s_active_chat g√∂zl…ôyin (message.chat.id):
        g√∂zl…ôy…ôn mesajƒ± geri qaytarƒ±n.reply_text ("s…ôsli s√∂hb…ôtd…ô he√ß bir ≈üey t…ôkrarlanmƒ±r").
    ƒ±d chat = message.chat.ƒ±d
    mesaj varsa.komanda[0][1]== "a":
        g√∂zl…ôyin deyils…ô, sonra ƒ±s_music_playing(message.chat.id):
            g√∂zl…ôy…ôn mesajƒ± qaytarƒ±n.reply_text ("Musiqi artƒ±q dayandƒ±rƒ±lƒ±b".)
        music_off (chat ID)g√∂zl…ôyir
        Yukki g√∂zl…ôyir.pytgcalls.pause_stream(ƒ±d chat)
        mesajƒ± g√∂zl…ôyir.reply_text(
            F " The s…ôs chat dayandƒ±rƒ±lƒ±b {post.istifad…ô√ßi.qeyd}!"
        )
    mesaj varsa.komanda[0][1]== "e":
        g√∂zl…ôm…ô-bu_muzyaka_games (message.chat.id):
            g√∂zl…ôy…ôn mesajƒ± qaytarƒ±n.reply_text ("Musiqi artƒ±q oynayƒ±r".)
        music_on(chat ID)g√∂zl…ôyir
        Yukki g√∂zl…ôyir.pytgcalls.b…ôrpa axƒ±nƒ±(message.chat.ƒ±d)
        mesajƒ± g√∂zl…ôyir.reply_text(
            f " The Voice Chat b…ôrpa {post.istifad…ô√ßi.qeyd}!"
        )
    mesaj varsa.komanda[0] [1] = = " t " v…ô ya mesaj.komanda[0][1]=="n":
        n√ºmun…ô:
            N√∂vb…ô. t…ômizl…ôm…ôk(message.chat.ƒ±d)
        bo≈ü n√∂vb…ô istisna olmaqla:
            ke√ßm…ôk
        g√∂zl…ôm…ô silinm…ô_aktiv_cat (√ßat identifikatoru)
        Yukki.pytgcalls g√∂zl…ôyin. t…ôrk_group_dcall(message.chat.id)
        mesajƒ± g√∂zl…ôyir.reply_text(
            F " The Voice Chat ba≈üa/dayandƒ±rƒ±lƒ±b {post.istifad…ô√ßi.qeyd}!"
        )
    mesaj varsa.komanda[0] [1] = = "k":
        N√∂vb…ô.task_done(ƒ±d chat)
        n√∂vb…ô varsa. is_empty (chat ID):
            g√∂zl…ôm…ô silinm…ô_aktiv_cat (√ßat identifikatoru)
            mesajƒ± g√∂zl…ôyir.reply_text(
                "__N√∂vb…ô__\n\n s…ôs chat t…ôrk No daha √ßox musiqi"
            )
            Yukki.pytgcalls g√∂zl…ôyin. t…ôrk_group_dcall(message.chat.id)
            qaytar
        h…ôl…ô:
            Videoid = n√∂vb…ô.alƒ±n (chat ID) ["fayl"]
            got_queue = get_queue.get(ƒ±d chat)
            got_queue …ôg…ôr:
                got_queue.pop(0)
            finxx = f " {videoƒ±d[0]}{videoƒ±d [1]}{videoƒ±d[2]}"
            aud = 0
            …ôg…ôr str(finxx)! = "i≈ül…ônm…ômi≈ü":
                Mystic = mesaj g√∂zl…ôyir.reply_text(
                    f " **{MUSƒ∞Qƒ∞L∆èR} oxutma funksiyasƒ± * * \n\n__ _ n√∂vb…ôti musiqini √ßalƒüƒ± siyahƒ±sƒ±ndan Y√ºkl…ôyin....__"
                )
                (
adƒ±,
m√ºdd…ôti_min,
uzunluq_sek,
                    miniat√ºr,
) = get_yt_info_id(–≤–∏–¥–µ–æ–∏–¥)
                mistisizmi g√∂zl…ôyin.Sinaqoqlar f…ôsil…ôsinin
                    f " **{ADI_MUSES} Uploader**\n\n * * Title: * * {adƒ±[:50]} \ n \ n0% ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì 100%"
                )
                y√ºkl…ônmi≈ü fayl = g√∂zl…ôm…ô d√∂vr√º.run_in_executor(
                    Xeyr, Y√ºkl…ô, Video, mistisizm, adƒ±
                )
                = g√∂zl…ôm…ô d√∂n√º≈ü√ºm (nazil fayl)
                Yukki g√∂zl…ôyir.pytgcalls.d…ôyi≈üiklik_potok(
                    identifikator
chat, giri≈ü stream(
                        Input audio stream(
                            raw_path,
),
),
)
                m√∂vzu = g√∂zl…ôm…ô yoxlamalar_teml…ôr (chat ID)
                chat_title = x√ºsusi font_to_normal (mesaj) √º√ß√ºn g√∂zl…ôm…ô.chat.Ba≈ülƒ±q)
                thumb = gen_thumb g√∂zl…ôyir ( 
                    miniat√ºr, ba≈ülƒ±ƒüƒ±nƒ±, message.from_user.ƒ±d, m√∂vzu, m√∂vzu chat
                )
                d√ºym…ôl…ôr = ilkin qeyd(
                    videoid, message.from_user.id, m√ºdd…ôti_min, m√ºdd…ôti_min
                )
                mistisizm g√∂zl…ôyir.(sil)
                qeyd = db_mem[video] ["istifad…ô√ßi adƒ±"]
                final_output = g√∂zl…ôyir mesajlarƒ±.reply_photo(
                    ≈ü…ôkil = thumb,
                    reply_markup= ƒ±nlinekeyboardmarkup(d√ºym…ôl…ôri),
imza=(
                        f " <b>__s…ôs chat buraxƒ±lmƒ±≈ü__ _ < /b > \ n\n<b>____oynamaƒüa ba≈üladƒ±: _ _ _ < /b>[{adƒ± [:25]}] (https://www.youtube.com/watch?v = {videoid}) \n<b>_duration:__ _ < / b> {davamiyy…ôt_min} d…ôqiq…ô\n** _ t…ôl…ôb: _ _ * * {qeyd}"
                    ),
                )
                os.sil (thumb)
            h…ôl…ô:
                Yukki g√∂zl…ôyir.pytgcalls.d…ôyi≈üiklik_potok(
                    identifikator
chat, giri≈ü stream(
                        Input audio stream(
                            azeri porno,
),
),
)
                AFK = videoid
                title = db_mem[videoƒ±d] ["title"]
                duration_min = db_mem[videoƒ±d]["duration"]
                duratƒ±on_sec = ƒ±nt(vaxt_to_tecunds (uzunluq_min))
                qeyd = db_mem[video] ["istifad…ô√ßi adƒ±"]
                videoƒ±d = db_mem[videoƒ±d] ["videoƒ±d"]
                …ôg…ôr str(video)=="smex1":
                    d√ºym…ôl…ôr = d√ºym…ôl…ôr = Audio markalanma(
                        azeri porno,
message.from_user.id,
m√ºdd…ôti_min,
m√ºdd…ôti_min,
)
                    thumb = "Utils/Telegram.JPEG "
                    aud = 1
                h…ôl…ô:
                    _pat_ = _pat_ = (
(str(afc))
                        .d…ôyi≈üdirin("_", "", 1)
                        .d…ôyi≈üdirin("/", "", 1)
                        .d…ôyi≈üdirin(".", "", 1)
                    )
                    thumb = f"cache/{_path_}Ultimate . png"
                    d√ºym…ôl…ôr = ilkin qeyd(
                        azeri porno,
message.from_user.id,
m√ºdd…ôti_min,
m√ºdd…ôti_min,
                    )
                final_output = g√∂zl…ôyir mesajlarƒ±.reply_photo(
                    ≈ü…ôkil = thumb,
                    reply_markup=InlineKeyboardMarkup(d√ºym…ôl…ôri),
 imza = e " < b>__ _ s…ôs chat buraxƒ±lmƒ±≈ü</b><b>________oynamaƒüa ba≈üladƒ±:__ _ _ </b> {adƒ±} \n<B> _ _ _ duration_min} \n <b> _ _ _ _ _ _ _ _ _ _ _ _ t…ôl…ôb: _ _ _ _ < /b > {danƒ±≈üan}",
 )
            g√∂zl…ôm…ô start_timer(
                azeri porno,
m√ºdd…ôti_min,
uzunluq_sek,
                son n…ôtic…ô,
message.chat.id,
message.from_user.id,
                aglayan,
)
Yandex uses essential, analytical, marketing and other cookies. These files are necessary to ensure smooth operation of all Yandex sites and services, they help us remember you and your personal settings. For details, please read our Cookie Policy.
View my options
Accept
